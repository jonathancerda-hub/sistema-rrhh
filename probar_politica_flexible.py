#!/usr/bin/env python
"""
Script para probar la nueva pol√≠tica FLEXIBLE de vacaciones
El empleado puede elegir cualquier per√≠odo, pero recibe mensajes informativos
"""

import os
import sys
import django
from datetime import date, timedelta

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nucleo_rrhh.settings')
django.setup()

from empleados.models import Empleado, SolicitudVacaciones

def probar_politica_flexible():
    """
    Prueba la nueva pol√≠tica flexible de vacaciones
    """
    print("üß™ PRUEBAS DE POL√çTICA FLEXIBLE DE VACACIONES")
    print("=" * 60)
    
    # Obtener empleado de prueba
    try:
        empleado = Empleado.objects.first()
        if not empleado:
            print("‚ùå No hay empleados en la base de datos para probar")
            return
    except Exception as e:
        print(f"‚ùå Error al obtener empleado: {e}")
        return
    
    print(f"üë§ Empleado de prueba: {empleado.nombres} {empleado.apellidos}")
    print()
    
    # Crear solicitud temporal para pruebas
    solicitud_temp = SolicitudVacaciones(empleado=empleado)
    
    # CASO 1: Solo d√≠as de semana (5 d√≠as laborables) - PERMITIDO
    print("üìÖ CASO 1: Solo d√≠as laborables (Lunes a Viernes)")
    fecha_inicio = date(2025, 9, 8)  # Lunes
    fecha_fin = date(2025, 9, 12)    # Viernes (5 d√≠as)
    
    validacion = solicitud_temp.validar_periodo_vacaciones(fecha_inicio, fecha_fin)
    print(f"  Fechas: {fecha_inicio} a {fecha_fin}")
    print(f"  D√≠as calendario: {validacion['dias_calendario']}")
    print(f"  S√°bados: {validacion['fines_semana']['sabados']}")
    print(f"  Domingos: {validacion['fines_semana']['domingos']}")
    print(f"  ‚úÖ V√°lido: {validacion['valido']} (PERMITIDO)")
    
    if validacion.get('mensajes_informativos'):
        for mensaje in validacion['mensajes_informativos']:
            print(f"  üí° Info: {mensaje}")
    
    if validacion['advertencias']:
        for advertencia in validacion['advertencias']:
            print(f"  ‚ö†Ô∏è Advertencia: {advertencia}")
    print()
    
    # CASO 2: Fin de semana largo (3 d√≠as con s√°bado y domingo) - PERMITIDO
    print("üìÖ CASO 2: Fin de semana largo (incluye s√°bado y domingo)")
    fecha_inicio = date(2025, 9, 13)  # S√°bado
    fecha_fin = date(2025, 9, 15)     # Lunes (3 d√≠as)
    
    validacion = solicitud_temp.validar_periodo_vacaciones(fecha_inicio, fecha_fin)
    print(f"  Fechas: {fecha_inicio} a {fecha_fin}")
    print(f"  D√≠as calendario: {validacion['dias_calendario']}")
    print(f"  S√°bados: {validacion['fines_semana']['sabados']}")
    print(f"  Domingos: {validacion['fines_semana']['domingos']}")
    print(f"  ‚úÖ V√°lido: {validacion['valido']} (PERMITIDO)")
    
    if validacion.get('mensajes_informativos'):
        for mensaje in validacion['mensajes_informativos']:
            print(f"  üí° Info: {mensaje}")
    
    if validacion['advertencias']:
        for advertencia in validacion['advertencias']:
            print(f"  ‚ö†Ô∏è Advertencia: {advertencia}")
    print()
    
    # CASO 3: Un solo d√≠a (mi√©rcoles) - PERMITIDO
    print("üìÖ CASO 3: Un solo d√≠a (mi√©rcoles)")
    fecha_inicio = date(2025, 9, 17)  # Mi√©rcoles
    fecha_fin = date(2025, 9, 17)     # Mismo d√≠a
    
    validacion = solicitud_temp.validar_periodo_vacaciones(fecha_inicio, fecha_fin)
    print(f"  Fechas: {fecha_inicio} a {fecha_fin}")
    print(f"  D√≠as calendario: {validacion['dias_calendario']}")
    print(f"  S√°bados: {validacion['fines_semana']['sabados']}")
    print(f"  Domingos: {validacion['fines_semana']['domingos']}")
    print(f"  ‚úÖ V√°lido: {validacion['valido']} (PERMITIDO)")
    
    if validacion.get('mensajes_informativos'):
        for mensaje in validacion['mensajes_informativos']:
            print(f"  üí° Info: {mensaje}")
    
    if validacion['advertencias']:
        for advertencia in validacion['advertencias']:
            print(f"  ‚ö†Ô∏è Advertencia: {advertencia}")
    print()
    
    # CASO 4: Dos semanas con fines de semana - PERMITIDO y RECOMENDADO
    print("üìÖ CASO 4: Dos semanas completas (incluye 4 fines de semana)")
    fecha_inicio = date(2025, 9, 15)  # Lunes
    fecha_fin = date(2025, 9, 28)     # Domingo (14 d√≠as)
    
    validacion = solicitud_temp.validar_periodo_vacaciones(fecha_inicio, fecha_fin)
    print(f"  Fechas: {fecha_inicio} a {fecha_fin}")
    print(f"  D√≠as calendario: {validacion['dias_calendario']}")
    print(f"  S√°bados: {validacion['fines_semana']['sabados']}")
    print(f"  Domingos: {validacion['fines_semana']['domingos']}")
    print(f"  ‚úÖ V√°lido: {validacion['valido']} (PERMITIDO)")
    
    if validacion.get('mensajes_informativos'):
        for mensaje in validacion['mensajes_informativos']:
            print(f"  üí° Info: {mensaje}")
    
    if validacion['advertencias']:
        for advertencia in validacion['advertencias']:
            print(f"  ‚ö†Ô∏è Advertencia: {advertencia}")
    print()
    
    # CASO 5: Exceso de d√≠as disponibles - ERROR
    print("üìÖ CASO 5: M√°s d√≠as de los disponibles (50 d√≠as)")
    fecha_inicio = date(2025, 10, 1)
    fecha_fin = date(2025, 11, 19)    # 50 d√≠as
    
    validacion = solicitud_temp.validar_periodo_vacaciones(fecha_inicio, fecha_fin)
    print(f"  Fechas: {fecha_inicio} a {fecha_fin}")
    print(f"  D√≠as calendario: {validacion['dias_calendario']}")
    print(f"  S√°bados: {validacion['fines_semana']['sabados']}")
    print(f"  Domingos: {validacion['fines_semana']['domingos']}")
    print(f"  ‚ùå V√°lido: {validacion['valido']} (ERROR)")
    
    if validacion['errores']:
        for error in validacion['errores']:
            print(f"  ‚ùå Error: {error}")
    
    if validacion.get('mensajes_informativos'):
        for mensaje in validacion['mensajes_informativos']:
            print(f"  üí° Info: {mensaje}")
    print()
    
    print("üèÅ RESUMEN DE PRUEBAS")
    print("‚úÖ La nueva pol√≠tica es FLEXIBLE:")
    print("   ‚Ä¢ Permite cualquier per√≠odo de fechas")
    print("   ‚Ä¢ Cuenta d√≠as calendario (incluyendo fines de semana)")
    print("   ‚Ä¢ Da mensajes informativos para promover inclusi√≥n de fines de semana")
    print("   ‚Ä¢ Solo da ERROR si excede d√≠as disponibles o fechas inv√°lidas")
    print("   ‚Ä¢ Proporciona seguimiento del cumplimiento anual")

if __name__ == "__main__":
    probar_politica_flexible()

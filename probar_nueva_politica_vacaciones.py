#!/usr/bin/env python
"""
Script para probar la nueva pol√≠tica de vacaciones
Verifica que los per√≠odos incluyan exactamente 4 s√°bados y 4 domingos
"""

import os
import sys
import django
from datetime import date, timedelta

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nucleo_rrhh.settings')
django.setup()

from empleados.models import Empleado, SolicitudVacaciones

def probar_politica_vacaciones():
    """
    Prueba varios escenarios de la nueva pol√≠tica de vacaciones
    """
    print("üß™ PRUEBAS DE NUEVA POL√çTICA DE VACACIONES")
    print("=" * 50)
    
    # Obtener o crear empleado de prueba
    try:
        empleado = Empleado.objects.first()
        if not empleado:
            print("‚ùå No hay empleados en la base de datos para probar")
            return
    except Exception as e:
        print(f"‚ùå Error al obtener empleado: {e}")
        return
    
    print(f"üë§ Empleado de prueba: {empleado.nombres} {empleado.apellidos}")
    print()
    
    # Crear solicitud temporal para pruebas
    solicitud_temp = SolicitudVacaciones(empleado=empleado)
    
    # Caso 1: Per√≠odo de 29 d√≠as (4 s√°bados y 4 domingos) - V√ÅLIDO
    print("üìÖ CASO 1: Per√≠odo de 29 d√≠as calendario (4 s√°bados y 4 domingos)")
    fecha_inicio = date(2025, 9, 1)  # Lunes 1 septiembre
    fecha_fin = fecha_inicio + timedelta(days=28)  # 29 d√≠as total
    
    validacion = solicitud_temp.validar_periodo_vacaciones(fecha_inicio, fecha_fin)
    print(f"  Fechas: {fecha_inicio} a {fecha_fin}")
    print(f"  D√≠as calendario: {validacion['dias_calendario']}")
    print(f"  S√°bados: {validacion['fines_semana']['sabados']}")
    print(f"  Domingos: {validacion['fines_semana']['domingos']}")
    print(f"  ‚úÖ V√°lido: {validacion['valido']}")
    
    if validacion['errores']:
        for error in validacion['errores']:
            print(f"  ‚ùå Error: {error}")
    
    if validacion['advertencias']:
        for advertencia in validacion['advertencias']:
            print(f"  ‚ö†Ô∏è Advertencia: {advertencia}")
    print()
    
    # Caso 2: Per√≠odo de 15 d√≠as (solo 2 s√°bados y 2 domingos) - INV√ÅLIDO
    print("üìÖ CASO 2: Per√≠odo de 15 d√≠as calendario (solo 2 s√°bados y 2 domingos)")
    fecha_inicio = date(2025, 9, 1)  # Lunes 1 septiembre
    fecha_fin = fecha_inicio + timedelta(days=14)  # 15 d√≠as total
    
    validacion = solicitud_temp.validar_periodo_vacaciones(fecha_inicio, fecha_fin)
    print(f"  Fechas: {fecha_inicio} a {fecha_fin}")
    print(f"  D√≠as calendario: {validacion['dias_calendario']}")
    print(f"  S√°bados: {validacion['fines_semana']['sabados']}")
    print(f"  Domingos: {validacion['fines_semana']['domingos']}")
    print(f"  ‚ùå V√°lido: {validacion['valido']}")
    
    if validacion['errores']:
        for error in validacion['errores']:
            print(f"  ‚ùå Error: {error}")
    
    if validacion['advertencias']:
        for advertencia in validacion['advertencias']:
            print(f"  ‚ö†Ô∏è Advertencia: {advertencia}")
    print()
    
    # Caso 3: Per√≠odo de 22 d√≠as (3 s√°bados y 3 domingos) - INV√ÅLIDO
    print("üìÖ CASO 3: Per√≠odo de 22 d√≠as calendario (3 s√°bados y 3 domingos)")
    fecha_inicio = date(2025, 9, 1)  # Lunes 1 septiembre
    fecha_fin = fecha_inicio + timedelta(days=21)  # 22 d√≠as total
    
    validacion = solicitud_temp.validar_periodo_vacaciones(fecha_inicio, fecha_fin)
    print(f"  Fechas: {fecha_inicio} a {fecha_fin}")
    print(f"  D√≠as calendario: {validacion['dias_calendario']}")
    print(f"  S√°bados: {validacion['fines_semana']['sabados']}")
    print(f"  Domingos: {validacion['fines_semana']['domingos']}")
    print(f"  ‚ùå V√°lido: {validacion['valido']}")
    
    if validacion['errores']:
        for error in validacion['errores']:
            print(f"  ‚ùå Error: {error}")
    
    if validacion['advertencias']:
        for advertencia in validacion['advertencias']:
            print(f"  ‚ö†Ô∏è Advertencia: {advertencia}")
    print()
    
    # Caso 4: Per√≠odo exacto de 4 semanas (28 d√≠as) - V√ÅLIDO
    print("üìÖ CASO 4: Per√≠odo exacto de 4 semanas (28 d√≠as calendario)")
    fecha_inicio = date(2025, 9, 1)  # Lunes 1 septiembre
    fecha_fin = fecha_inicio + timedelta(days=27)  # 28 d√≠as total
    
    validacion = solicitud_temp.validar_periodo_vacaciones(fecha_inicio, fecha_fin)
    print(f"  Fechas: {fecha_inicio} a {fecha_fin}")
    print(f"  D√≠as calendario: {validacion['dias_calendario']}")
    print(f"  S√°bados: {validacion['fines_semana']['sabados']}")
    print(f"  Domingos: {validacion['fines_semana']['domingos']}")
    print(f"  ‚úÖ V√°lido: {validacion['valido']}")
    
    if validacion['errores']:
        for error in validacion['errores']:
            print(f"  ‚ùå Error: {error}")
    
    if validacion['advertencias']:
        for advertencia in validacion['advertencias']:
            print(f"  ‚ö†Ô∏è Advertencia: {advertencia}")
    print()
    
    print("üèÅ PRUEBAS COMPLETADAS")
    print("La nueva pol√≠tica requiere exactamente 4 s√°bados y 4 domingos en el per√≠odo de vacaciones.")

if __name__ == "__main__":
    probar_politica_vacaciones()
